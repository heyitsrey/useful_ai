Code Generation

I need to implement [specific functionality] in [programming language].
Key requirements:
1. [Requirement 1]
2. [Requirement 2]
3. [Requirement 3]
Please consider:
- Error handling
- Edge cases
- Performance optimization
- Best practices for [language/framework]
- Best practices for Clean Code
Please do not unnecessarily remove any comments or code.
Generate the code with clear comments explaining the logic.

_____________________________________________________________________________________________________________________

Understanding Code

Can you explain the following part of the code in detail:
[paste code section]
Specifically:
1. What is the purpose of this section?
2. How does it work step-by-step?
3. Are there any potential issues or limitations with this approach?

_____________________________________________________________________________________________________________________

Code Reviews
Please review the following code:
[paste your code]
Consider:
1. Code quality and adherence to best practices
2. Potential bugs or edge cases
3. Performance optimizations
4. Readability and maintainability
5. Any security concerns
Suggest improvements and explain your reasoning for each suggestion.

_____________________________________________________________________________________________________________________

Unit Tests

Generate unit tests for the following function:
[paste function]
Include tests for:
1. Normal expected inputs
2. Edge cases
3. Invalid inputs
Use [preferred testing framework] syntax.
Use the Arrange-Act-Assert pattern.

_____________________________________________________________________________________________________________________

Optimizing

Here's a piece of code that needs optimization:
[paste code]
Please suggest optimizations to improve its performance. For each suggestion, explain the expected improvement and any trade-offs.

_____________________________________________________________________________________________________________________

Classes

Create a [class/module] for [specific functionality] in [programming language].
Include:
1. Constructor/initialization
2. Main methods with clear docstrings
3. Any necessary private helper methods
4. Proper encapsulation and adherence to OOP principles
5. Split Code into .hpp and .cpp files
6. Use fitting namespaces
7. Use templates when it fits